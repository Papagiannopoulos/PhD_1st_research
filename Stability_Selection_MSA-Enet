#This code performes feature selection applying Stability Selection using Multi-Step Adaptive Elastic Net

# Libraries
library(readr); library(readxl); library(xlsx)
library(caret); library(msaenet)#MULTI STEP ADAPTIVE ELASTIC NET
library(dplyr); library(purrr)
library(ggplot2); library(ggpubr); 
library(doParallel); library(parallel); library(doRNG)#For Parallelization

metaboRank <- read_excel("")
y <- read_excel("")

# Structure of the used data sets
# 1) metaboRank: Metabolimics Data Frame
str(metaboRank)
# data.frame:	~150,000 obs. of  250 variables:
# my_var    : num  0.983 0.137 1.073 0.317 -0.133 ...
# X23400.0.0: num  1.3303 0.0362 -0.0591 -0.8152 1.4455 ...
# X23401.0.0: num  0.93 -0.111 -0.342 -0.892 1.363 ...
# X23402.0.0: num  1.12 -0.245 -0.432 -0.78 1.121 ...
# X23403.0.0: num  0.689 -0.657 -0.571 -0.602 0.773 ...
# X23404.0.0: num  0.8893 0.0822 -0.3364 -1.0878 1.513 ...
# X23405.0.0: num  0.7212 0.0154 -0.2438 -0.9506 1.5361 ...
# X23406.0.0: num  1.538 0.615 0.916 0.172 0.729 ...
# X23407.0.0: num  -0.0708 -1.378 -0.5791 0.2737 0.0938 ...
# .
# .
# .

# 2) y: Adiposity Data Frame
str(y)
# data.frame:	70591 obs. of  8 variables:
# Body Fat          : num  0.983 0.137 1.073 0.317 -0.133 ...
# Waist             : num  -0.8231 -0.0584 0.5151 0.993 -0.7275 ...
# Hip               : num  -1.876 0.294 0.873 1.018 0.149 ...
# Wasit to Hip Ratio: num  0.6341 -0.3614 -0.0101 0.5854 -1.3039 ...
# BMI               : num  -0.619 -0.431 0.296 0.228 -0.626 ...
# ABSI              : num  -0.00178 1.0246 0.41346 1.41344 -0.17265 ...
# HI                : num  -1.672 1.958 0.981 1.169 1.915 ...
# WHI               : num  1.206 -0.196 -0.229 0.551 -1.263 ...
# .
# .
# .

##### Stability Selection #####
set.seed(3487)
# Parallelization
cl <- makeCluster(detectCores() - 2)
registerDoParallel(cl)
registerDoRNG(seed = 23423)

features <- list()
N <- 100 # Number of Splits
# Hyperparameters
steps <- 5
criteria <- c("lambda.1se","lambda.min")
gamma <- c(0.1,0.5,1,1.5,2,2.5,3)
for(p in 1:length(y)){
  print(p)
  set.seed(572920)
  features[[p]] <- vector()
  metaboRank$my_var <- y[,p]
  for(j in 1:N){
    print(j)
    train_rows <- metaboRank$my_var %>% createDataPartition(p = 0.80, list = F)
    train <- metaboRank[train_rows,]
    
    x1 <- sample(criteria, 1, replace = T)
    x2 <- sample(gamma, 1, replace = T)
    print(x1); print(x2)
    msanet <- msaenet(as.matrix(train[,-match("my_var",names(train))]),train[,match("my_var",names(train))],
                      family = "gaussian",init = "enet",tune = "cv",nfolds = 10,
                      rule = x1,alphas = seq(0.1,1,0.1),verbose = T,
                      parallel = T,scale = x2,seed = T,nsteps = steps,tune.nsteps = "ebic")
    
    msanet_coef <- data.frame(names = rownames(msanet$beta),coef1 = msanet$beta[,1])
    msanet_coef <-  msanet_coef[msanet_coef$coef1 != 0,]
    features[[p]] <- c(features[[p]], msanet_coef$names)
  }
  features[[p]] <- data.frame(Feature = names(table(features[[p]])), Counts = as.numeric(table(features[[p]])))
  features[[p]] <- arrange(features[[p]], desc(Counts))
  features[[p]]$Abr <- UKB_abr$Metabolite[match(features[[p]]$Feature, UKB_abr$data_field)]
  
  write.xlsx(features[[p]], paste0("FS/",names(y)[p],"_Feature_Selection_for.xlsx"), row.names = F, showNA = F)
}
stopCluster(cl)
